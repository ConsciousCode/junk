.world file format

#Stored as a series of chunks - they should be in this order, but prepare for them to not be. Chunk id's are 4-byte strings with a DWORD chunksize. Attempts will be made to retain backwards compatibility, so simply ignore unknown extra chunks.

"WRLD"
STRING worldname
BYTE[32] seedhash

"MODS"
DWORD chunksize
#mods section
WORD mods
[mods]
	DWORD modlength
	<see .mod file format, minus the BLOX section>

"BLOX"
#define all used blocks in a sequential list to make ids very well-defined
DWORD chunklength
WORD blocks
[blocks]
	STRING name
	STRING description
	FLOAT light
	FLOAT gravity
	BYTE extra #extra length required (in bytes)
	WORD code
	STRING mesh
	STRING skin

"DATA"
#World chunk data section
#Stored as a specialized octree with 4-bit "commands" telling the reader how to split the block and a variable number of 12-bit block ids, depending on the command.
	x000 - No split (The entire chunk is one material)
	x001 - x bisect
	x010 - y bisect
	x011 - z bisect
	x100 - x tetrasect
	x101 - y tetrasect
	x110 - z tetrasect
	x111 - Full six-way split
	
	0xxx - Assume all following operands are leaves, not branches
	1xxx - All operands have a command
	
	Special case:
	1000 - Jump command (following operand is the fragment id)

        +y    -z
        |    /
	    |___/
       /4  7/|
-x___ /5__6/ |___+x
     |  0 |3/
     |1__2|/
      / |
	 /  |
    /  -y
  +z

Operands follow the above order (clockwise spiral upwards from the negative -> positive POV on the y axis).

BYTE depth #used to determine the size of these blocks
#the tree should never go deeper than depth. At the lowest level, blocks are the most basic size.

"FRAG" (fragment chunk)
#used to speed up in-game map modifications (moving half the file may be too costly, so instead data is appended to the file and a jump command inserted in the change's place

DWORD chunksize #obligatory
WORD fragments
[fragments]
	WORD fragsize
	[fragsize]
		<data>

<EOF>
	
Note that because the fragment section grows randomly, appending arbitrary data to the file will disturb and ultimately corrupt changes. World files should never be used to deliver hidden file payload through simple appending.